/**
 * Created by leo on 24/12/16.
 */


/*
* v8 是 chrome浏览器中御用解析 javascript的引擎， 这个引擎被用于服务器的开发和应用， 这个满足事件驱动和 i/o异步传输.
* Node.js 是一个让js运行在服务器端的开发平台，可以与PHP,JSP,Python,Ruby平起平坐
* Node.js不是一种独立的语言，与PHP，JSP，Python,Perl,Ruby 的既是语言也是平台不同，Node.js 是使用JS进行编程，运行在JS引擎上v8.
* 与其他语言比较,他们都需要运行在apache,jsp, net 服务器上面。一般的服务器框架都是 LAMP(linux, apache, mysql, php)。
* 而node.js只有 操作系统+数据库+语言， 而省略了服务器部分，虽然没有服务器，但是node.js的多线程担当起服务器的工作。
*
* 特点：
* node.js 是如何解决服务器高性能瓶颈问题的： 单线程，非阻塞i/o, 事件驱动
*
* 单线程，在 JAVA,PHP, .NET等服务器语言中，会为每一个客户链接创建一个新的线程，而每一个线程需要消耗大约2MB内存，理论上，一个8GB的内存
* 的服务器可以同时创建大约用户数为4000个， 要让web应用程序支持更多的用户，就需要增加服务器的数量，而web应用程序的的硬件成本就上升了。
* 而 node.js不为每一个客户链接创建一个新的线程，而仅仅使用一个线程。当有用户连接了，就触发了一个内部事件，通过非阻塞I/O，事件驱动机制，
* 让node.js 程序宏观上也是并行的。使用node.js，一个8GB内存的服务器可以同时处理超过4万个用户连接。另外，带线程带来的好处，还有操作系统完全
* 不再有线程创建，销毁的时间开销。也就是一个线程在多用户之间高速切换。坏处就是一个用户造成了线程崩溃就造成整个服务器的崩溃。
* 也就是单线程能造成宏观上的并发。
*
* 非阻塞I/O， 当访问数据库取得数据的时候，需要一段时间，在传统的单线程处理机制中，在执行了访问数据库代码后，整个线程都将暂停下来，
* 等待数据库返回结果，才能执行后面的代码，也就是说，I/O堵塞了代码的执行，极大地降低了程序的执行效率。
* 由于node.js中采用了非阻塞I/O机制，因此在执行了访问数据库的代码后，立刻转而执行其后面的代码，把数据库返回的结果的处理代码放在回调函数
* 中，从而提高了程序的执行效率。当某个I/O执行完毕后，将以事件的形式通知执行I/O操作线程，线程执行这个时间的回调函数，为了处理异步I/O，
* 线程必须有事件循环，不断地检查有没有未处理的事件，依次处理。
* 阻塞模式下，一个线程只能处理一个任务，要想提高吞吐量必须通过多线程，而非阻塞模式下，一个线程永远执行计算操作，这个现成的cpu核心利用率为100%，
* 所以相当于与其人多，但是好多人闲着，还不如一个人玩命，往死里干活。
*
* 事件驱动， 在node.js中，客户端请求建立连接，提交数据等行为，会触发相应的事件，在node.js中，在一个时刻，只能执行一个事件回调函数，
* 但是在执行一个事件回调函数的中途，可以转而处理其他的事件，比如又有一个新用户连接了，然后返回继续执行原事件的回调函数，这种处理机制，称为，
* 事件环机制。
* node.js的底层是 c++, 底层代码中，近半数用于事件队列，回调函数队列的构建。用事件驱动来完成服务器的任务调度是node.js的核心。
*
* 总之，用一个线程来处理多任务的使命。
*
* event draiven, non-blocking i/o,
* 单线程，减少了内存开销，操作系统的内存换页，
* 这时候如果一个事情进入了，但是被I/O阻塞了，所以这个线程就被阻塞了。
* 因此就想到了 非阻塞I/O，就是不会只是等待I/O语句结束，而会执行后面的语句
* 但是非阻塞就能解决了么？ 比如正执行小红的业务，执行过程中，小刚的I/O的回调完成了。必须有一个机制来处理这个回调事件，否则就会越来越多
* 因此要有 事件机制---事件环---事件驱动，不管是新用户的请求还是老用户的回调，都将以事件方式加入事件环，等待调度，老用户优先处理。
*
* 这三个特点其实就是一个特点。！！！！
*
* node.js中所有的I/O 都是异步的，回调函数套回调函数。
* */

/*
* node.js适合开发什么样的程序呢？
* 善于i/o 而 不善于 计算
*
* 因为node.js最擅长的是任务调度，如果你的业务过度CPU计算，实际上也相当于这个计算阻塞了这个单线程.
* 当应用程序需要处理大量并发的I/O，而在向客户发出相应之前，应用程序内部并不需要进行非常复杂的处理的时候，node.js非常适合。
* node.js也非常适合与web socket配合，开发长连接的实时交互应用程序。
*
* 比如： 用户表单的收集， 考试系统， 长连接的实时交互程序（聊天室， 图文直播），提供JSON的API 为前台angular使用 就是后台服务器只是向
* 前台提供 JSON字符串，共前台拼接，而不再提供界面了。
*
* */

/*
* node.js无法挑战PHP, JSP等老牌后台语言。
* node.js本身就是极客追求性能极致的产物，缺少了很多服务器的健壮考量。所有node.js不可能应用在银行，证券，电信等需要极高可靠性的业务中，
* 一般是小公司或者创业型公司用node.js，或者只是实现某一方面。
* */



























